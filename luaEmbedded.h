#ifndef LUA_EMBEDDED_H
#define LUA_EMBEDDED_H

// ==========================================================================================
// IMPORTANT: Do not delete the code below!
// The following bytecode is generated from the Lua source code and is used at runtime.
// The original Lua source is provided below for documentation and fallback purposes.
// ==========================================================================================

// ---------- Precompiled Lua Bytecode (Used at Runtime) ----------
static const unsigned char luaBytecode[] = {
0x1B, 0x4C, 0x75, 0x61, 0x54, 0x00, 0x19, 0x93, 0x0D, 0x0A, 0x1A, 0x0A, 0x04, 0x08, 0x08, 0x78, 
0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x77, 0x40, 0x01, 
0x90, 0x40, 0x69, 0x6E, 0x69, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2E, 0x6C, 0x75, 0x61, 
0x80, 0x80, 0x00, 0x01, 0x02, 0x95, 0x51, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x0F, 0x00, 
0x00, 0x00, 0x4F, 0x80, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x00, 0x4F, 0x00, 0x01, 0x00, 0x0F, 0x00, 
0x02, 0x00, 0x4F, 0x80, 0x01, 0x00, 0x0F, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x03, 0x0F, 0x00, 
0x04, 0x00, 0x13, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x4F, 0x00, 
0x02, 0x00, 0x0F, 0x00, 0x06, 0x00, 0x4F, 0x80, 0x02, 0x00, 0x0F, 0x00, 0x07, 0x00, 0x4F, 0x00, 
0x03, 0x00, 0x0F, 0x00, 0x08, 0x00, 0x46, 0x00, 0x01, 0x01, 0x89, 0x04, 0x85, 0x63, 0x6F, 0x6E, 
0x64, 0x04, 0x84, 0x73, 0x65, 0x74, 0x04, 0x85, 0x66, 0x6D, 0x74, 0x4E, 0x04, 0x85, 0x76, 0x61, 
0x72, 0x73, 0x04, 0x85, 0x69, 0x6E, 0x69, 0x74, 0x04, 0x8B, 0x68, 0x61, 0x73, 0x68, 0x54, 0x61, 
0x62, 0x6C, 0x65, 0x73, 0x04, 0x94, 0x73, 0x61, 0x66, 0x65, 0x4C, 0x6F, 0x61, 0x64, 0x46, 0x69, 
0x6C, 0x65, 0x53, 0x61, 0x6E, 0x64, 0x62, 0x6F, 0x78, 0x04, 0x84, 0x6C, 0x6B, 0x70, 0x04, 0x86, 
0x6C, 0x76, 0x61, 0x72, 0x73, 0x81, 0x01, 0x00, 0x00, 0x87, 0x80, 0x84, 0xB0, 0x03, 0x00, 0x06, 
0xC7, 0x93, 0x01, 0x02, 0x00, 0x52, 0x00, 0x00, 0x00, 0x92, 0x81, 0x00, 0x01, 0x92, 0x81, 0x02, 
0x03, 0x3C, 0x00, 0x04, 0x00, 0xB8, 0x01, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x05, 0x83, 0x02, 0x03, 
0x00, 0x44, 0x02, 0x02, 0x01, 0xC8, 0x01, 0x02, 0x00, 0x42, 0x00, 0x00, 0x00, 0xB8, 0x02, 0x00, 
0x80, 0xBC, 0x00, 0x04, 0x00, 0xB8, 0x01, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x05, 0x83, 0x82, 0x03, 
0x00, 0x44, 0x02, 0x02, 0x01, 0xC8, 0x01, 0x02, 0x00, 0x42, 0x80, 0x00, 0x00, 0x38, 0x01, 0x00, 
0x80, 0x3C, 0x01, 0x04, 0x00, 0x38, 0x00, 0x00, 0x80, 0x92, 0x81, 0x02, 0x08, 0x0B, 0x02, 0x00, 
0x09, 0x80, 0x02, 0x01, 0x00, 0x44, 0x02, 0x02, 0x02, 0x3C, 0x02, 0x0A, 0x00, 0x38, 0x01, 0x00, 
0x80, 0x00, 0x02, 0x01, 0x00, 0x44, 0x02, 0x01, 0x02, 0x80, 0x00, 0x04, 0x00, 0x0B, 0x02, 0x00, 
0x09, 0x80, 0x02, 0x02, 0x00, 0x44, 0x02, 0x02, 0x02, 0x3C, 0x02, 0x0A, 0x00, 0x38, 0x01, 0x00, 
0x80, 0x00, 0x02, 0x02, 0x00, 0x44, 0x02, 0x01, 0x02, 0x00, 0x01, 0x04, 0x00, 0x42, 0x00, 0x00, 
0x00, 0x38, 0x06, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x09, 0x80, 0x02, 0x01, 0x00, 0x44, 0x02, 0x02, 
0x02, 0x3C, 0x02, 0x0B, 0x00, 0x38, 0x02, 0x00, 0x80, 0x0E, 0x02, 0x01, 0x00, 0x92, 0x01, 0x00, 
0x04, 0x0E, 0x02, 0x01, 0x02, 0x92, 0x01, 0x02, 0x04, 0x38, 0x08, 0x00, 0x80, 0x92, 0x01, 0x00, 
0x01, 0x92, 0x81, 0x02, 0x03, 0xB8, 0x06, 0x00, 0x80, 0x0E, 0x02, 0x03, 0x02, 0x42, 0x82, 0x00, 
0x00, 0x38, 0x05, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x09, 0x80, 0x02, 0x02, 0x00, 0x44, 0x02, 0x02, 
0x02, 0x3C, 0x02, 0x0B, 0x00, 0x38, 0x02, 0x00, 0x80, 0x0E, 0x02, 0x02, 0x00, 0x92, 0x01, 0x00, 
0x04, 0x0E, 0x02, 0x02, 0x02, 0x92, 0x01, 0x02, 0x04, 0x38, 0x00, 0x00, 0x80, 0x92, 0x01, 0x00, 
0x02, 0x0F, 0x00, 0x0C, 0x03, 0xC8, 0x01, 0x02, 0x00, 0x47, 0x02, 0x01, 0x00, 0x8D, 0x04, 0x87, 
0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 0x04, 0x81, 0x04, 0x85, 0x73, 0x6B, 0x69, 0x70, 0x01, 0x00, 
0x04, 0x86, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x04, 0x9E, 0x63, 0x6F, 0x6E, 0x64, 0x3A, 0x20, 0x63, 
0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 
0x62, 0x65, 0x20, 0x6E, 0x69, 0x6C, 0x04, 0x9C, 0x63, 0x6F, 0x6E, 0x64, 0x3A, 0x20, 0x74, 0x72, 
0x75, 0x65, 0x56, 0x61, 0x6C, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 
0x6E, 0x69, 0x6C, 0x11, 0x04, 0x85, 0x74, 0x79, 0x70, 0x65, 0x04, 0x89, 0x66, 0x75, 0x6E, 0x63, 
0x74, 0x69, 0x6F, 0x6E, 0x04, 0x86, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x04, 0x8C, 0x72, 0x65, 0x73, 
0x75, 0x6C, 0x74, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x81, 0x00, 0x00, 0x00, 0x80, 0xC7, 0x01, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 
0x03, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 
0x00, 0x02, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 
0x00, 0x02, 0x04, 0x01, 0x01, 0x80, 0x84, 0x85, 0x63, 0x6F, 0x6E, 0x64, 0x80, 0xC7, 0x88, 0x74, 
0x72, 0x75, 0x65, 0x56, 0x61, 0x6C, 0x80, 0xC7, 0x89, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x56, 0x61, 
0x6C, 0x80, 0xC7, 0x84, 0x72, 0x65, 0x73, 0x84, 0xC7, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x80, 
0xB5, 0xC5, 0x01, 0x00, 0x04, 0xA2, 0x93, 0x00, 0x02, 0x00, 0x52, 0x00, 0x00, 0x00, 0x92, 0x80, 
0x00, 0x01, 0x92, 0x80, 0x02, 0x03, 0x3C, 0x00, 0x04, 0x00, 0xB8, 0x01, 0x00, 0x80, 0x0B, 0x01, 
0x00, 0x05, 0x83, 0x01, 0x03, 0x00, 0x44, 0x01, 0x02, 0x01, 0x47, 0x01, 0x01, 0x00, 0x0B, 0x01, 
0x00, 0x07, 0x80, 0x01, 0x00, 0x00, 0x44, 0x01, 0x02, 0x02, 0x3C, 0x01, 0x08, 0x00, 0xB8, 0x00, 
0x00, 0x80, 0x92, 0x00, 0x00, 0x00, 0xB8, 0x06, 0x00, 0x80, 0x0B, 0x01, 0x00, 0x07, 0x80, 0x01, 
0x00, 0x00, 0x44, 0x01, 0x02, 0x02, 0x3C, 0x01, 0x09, 0x00, 0x38, 0x02, 0x00, 0x80, 0x0B, 0x01, 
0x00, 0x0A, 0x80, 0x01, 0x00, 0x00, 0x44, 0x01, 0x02, 0x02, 0x92, 0x00, 0x00, 0x02, 0xB8, 0x01, 
0x00, 0x80, 0x0B, 0x01, 0x00, 0x05, 0x83, 0x81, 0x05, 0x00, 0x44, 0x01, 0x02, 0x01, 0x47, 0x01, 
0x01, 0x00, 0x0F, 0x00, 0x0C, 0x01, 0xC8, 0x00, 0x02, 0x00, 0x47, 0x01, 0x01, 0x00, 0x8D, 0x04, 
0x87, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 0x04, 0x81, 0x04, 0x85, 0x73, 0x6B, 0x69, 0x70, 0x01, 
0x00, 0x04, 0x86, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x04, 0x93, 0x73, 0x65, 0x74, 0x3A, 0x20, 0x63, 
0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6E, 0x69, 0x6C, 0x04, 0x85, 0x74, 0x79, 
0x70, 0x65, 0x04, 0x87, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x04, 0x87, 0x6E, 0x75, 0x6D, 0x62, 
0x65, 0x72, 0x04, 0x89, 0x74, 0x6F, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x04, 0x9F, 0x73, 0x65, 
0x74, 0x3A, 0x20, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 
0x6E, 0x67, 0x20, 0x6F, 0x72, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x04, 0x8C, 0x72, 0x65, 
0x73, 0x75, 0x6C, 0x74, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x81, 0x00, 0x00, 0x00, 0x80, 0xA2, 0x01, 
0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 
0x01, 0x80, 0x82, 0x8A, 0x73, 0x74, 0x72, 0x4F, 0x72, 0x43, 0x61, 0x6C, 0x63, 0x80, 0xA2, 0x84, 
0x72, 0x65, 0x73, 0x84, 0xA2, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x80, 0xCA, 0xEF, 0x03, 0x00, 
0x0A, 0xDA, 0x3C, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x80, 0x8B, 0x01, 0x00, 0x01, 0x03, 0x02, 
0x01, 0x00, 0xC4, 0x01, 0x02, 0x01, 0xC7, 0x01, 0x01, 0x00, 0x38, 0x04, 0x00, 0x80, 0x8B, 0x01, 
0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0xC4, 0x01, 0x02, 0x02, 0xBC, 0x81, 0x04, 0x00, 0xB8, 0x01, 
0x00, 0x80, 0x8B, 0x01, 0x00, 0x01, 0x03, 0x82, 0x02, 0x00, 0xC4, 0x01, 0x02, 0x01, 0xC7, 0x01, 
0x01, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x80, 0x8B, 0x01, 0x00, 0x01, 0x03, 0x02, 
0x03, 0x00, 0xC4, 0x01, 0x02, 0x01, 0xC7, 0x01, 0x01, 0x00, 0x38, 0x04, 0x00, 0x80, 0x8B, 0x01, 
0x00, 0x03, 0x00, 0x02, 0x01, 0x00, 0xC4, 0x01, 0x02, 0x02, 0xBC, 0x81, 0x04, 0x00, 0xB8, 0x01, 
0x00, 0x80, 0x8B, 0x01, 0x00, 0x01, 0x03, 0x82, 0x03, 0x00, 0xC4, 0x01, 0x02, 0x01, 0xC7, 0x01, 
0x01, 0x00, 0x3C, 0x01, 0x00, 0x00, 0x38, 0x02, 0x00, 0x80, 0x8B, 0x01, 0x00, 0x01, 0x03, 0x02, 
0x04, 0x00, 0xC4, 0x01, 0x02, 0x01, 0xC7, 0x01, 0x01, 0x00, 0x38, 0x04, 0x00, 0x80, 0x8B, 0x01, 
0x00, 0x03, 0x00, 0x02, 0x02, 0x00, 0xC4, 0x01, 0x02, 0x02, 0xBC, 0x81, 0x09, 0x00, 0xB8, 0x01, 
0x00, 0x80, 0x8B, 0x01, 0x00, 0x01, 0x03, 0x02, 0x05, 0x00, 0xC4, 0x01, 0x02, 0x01, 0xC7, 0x01, 
0x01, 0x00, 0x81, 0x81, 0x04, 0x80, 0xA6, 0x01, 0x03, 0x01, 0xAE, 0x01, 0x01, 0x0A, 0x0B, 0x02, 
0x00, 0x0B, 0x0E, 0x02, 0x04, 0x0C, 0xA4, 0x02, 0x00, 0x03, 0x2E, 0x00, 0x03, 0x08, 0x96, 0x02, 
0x05, 0x0D, 0xB0, 0x02, 0x0D, 0x06, 0x44, 0x02, 0x02, 0x02, 0x27, 0x02, 0x04, 0x03, 0x2E, 0x02, 
0x03, 0x0B, 0x83, 0x02, 0x07, 0x00, 0x42, 0x01, 0x00, 0x00, 0xB8, 0x04, 0x00, 0x80, 0x0B, 0x03, 
0x00, 0x0F, 0x0E, 0x03, 0x06, 0x10, 0x83, 0x83, 0x08, 0x00, 0x00, 0x04, 0x01, 0x00, 0x83, 0x04, 
0x09, 0x00, 0xB5, 0x03, 0x03, 0x00, 0x00, 0x04, 0x04, 0x00, 0x44, 0x03, 0x03, 0x02, 0x80, 0x02, 
0x06, 0x00, 0x38, 0x07, 0x00, 0x80, 0x0B, 0x03, 0x00, 0x0B, 0x0E, 0x03, 0x06, 0x13, 0x80, 0x03, 
0x04, 0x00, 0x44, 0x03, 0x02, 0x03, 0xBD, 0x03, 0x7F, 0x00, 0x38, 0x02, 0x00, 0x80, 0x0B, 0x04, 
0x00, 0x14, 0x80, 0x04, 0x06, 0x00, 0x44, 0x04, 0x02, 0x02, 0x80, 0x02, 0x08, 0x00, 0xB8, 0x01, 
0x00, 0x80, 0x0B, 0x04, 0x00, 0x14, 0x80, 0x04, 0x04, 0x00, 0x44, 0x04, 0x02, 0x02, 0x80, 0x02, 
0x08, 0x00, 0xC8, 0x02, 0x02, 0x00, 0x47, 0x03, 0x01, 0x00, 0x95, 0x00, 0x04, 0x86, 0x65, 0x72, 
0x72, 0x6F, 0x72, 0x04, 0x98, 0x66, 0x6D, 0x74, 0x4E, 0x3A, 0x20, 0x6E, 0x75, 0x6D, 0x20, 0x63, 
0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6E, 0x69, 0x6C, 0x04, 0x85, 0x74, 0x79, 
0x70, 0x65, 0x04, 0x87, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x14, 0xAE, 0x66, 0x6D, 0x74, 0x4E, 
0x3A, 0x20, 0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, 
0x6F, 0x72, 0x20, 0x6E, 0x75, 0x6D, 0x2E, 0x20, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 
0x20, 0x61, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x04, 0xA0, 0x66, 0x6D, 0x74, 0x4E, 0x3A, 
0x20, 0x6D, 0x61, 0x78, 0x44, 0x65, 0x63, 0x69, 0x6D, 0x61, 0x6C, 0x73, 0x20, 0x63, 0x61, 0x6E, 
0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6E, 0x69, 0x6C, 0x14, 0xB6, 0x66, 0x6D, 0x74, 0x4E, 
0x3A, 0x20, 0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, 
0x6F, 0x72, 0x20, 0x6D, 0x61, 0x78, 0x44, 0x65, 0x63, 0x69, 0x6D, 0x61, 0x6C, 0x73, 0x2E, 0x20, 
0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 
0x72, 0x04, 0xA2, 0x66, 0x6D, 0x74, 0x4E, 0x3A, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 
0x63, 0x69, 0x6D, 0x61, 0x6C, 0x73, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 
0x20, 0x6E, 0x69, 0x6C, 0x04, 0x88, 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x14, 0xB9, 0x66, 
0x6D, 0x74, 0x4E, 0x3A, 0x20, 0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x74, 0x79, 0x70, 
0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x6D, 
0x61, 0x6C, 0x73, 0x2E, 0x20, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 
0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x04, 0x85, 0x6D, 0x61, 0x74, 0x68, 0x04, 0x86, 0x66, 
0x6C, 0x6F, 0x6F, 0x72, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x04, 0x81, 0x04, 
0x87, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x04, 0x87, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x04, 
0x83, 0x25, 0x2E, 0x04, 0x82, 0x66, 0x04, 0x85, 0x6D, 0x6F, 0x64, 0x66, 0x04, 0x89, 0x74, 0x6F, 
0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x81, 0x00, 0x00, 0x00, 0x80, 0xDA, 0x01, 0x00, 0x01, 0x00, 
0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 
0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 
0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x02, 0x00, 0x00, 0x00, 0x03, 0x01, 0x80, 0x88, 0x84, 0x6E, 0x75, 0x6D, 0x80, 0xDA, 0x8C, 0x6D, 
0x61, 0x78, 0x44, 0x65, 0x63, 0x69, 0x6D, 0x61, 0x6C, 0x73, 0x80, 0xDA, 0x8E, 0x66, 0x69, 0x78, 
0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x6D, 0x61, 0x6C, 0x73, 0x80, 0xDA, 0x8B, 0x6D, 0x75, 0x6C, 
0x74, 0x69, 0x70, 0x6C, 0x69, 0x65, 0x72, 0xB3, 0xDA, 0x88, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x65, 
0x64, 0xBC, 0xDA, 0x87, 0x6F, 0x75, 0x74, 0x70, 0x75, 0x74, 0xBD, 0xDA, 0x88, 0x69, 0x6E, 0x74, 
0x50, 0x61, 0x72, 0x74, 0xCD, 0xD8, 0x89, 0x66, 0x72, 0x61, 0x63, 0x50, 0x61, 0x72, 0x74, 0xCD, 
0xD8, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x80, 0xF4, 0x01, 0x96, 0x01, 0x00, 0x0B, 0xCB, 0x8B, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xC4, 0x00, 0x02, 0x05, 0xCB, 0x00, 0x15, 0x00, 0x8B, 
0x03, 0x00, 0x01, 0x8C, 0x03, 0x07, 0x05, 0xBC, 0x03, 0x02, 0x00, 0xB8, 0x12, 0x00, 0x80, 0x8B, 
0x03, 0x00, 0x03, 0x00, 0x04, 0x05, 0x00, 0xC4, 0x03, 0x02, 0x02, 0xBC, 0x83, 0x04, 0x00, 0x38, 
0x01, 0x00, 0x80, 0x8B, 0x03, 0x00, 0x05, 0x03, 0x04, 0x03, 0x00, 0xC4, 0x03, 0x02, 0x01, 0x8B, 
0x03, 0x00, 0x04, 0x8E, 0x03, 0x07, 0x07, 0x00, 0x04, 0x05, 0x00, 0x83, 0x04, 0x04, 0x00, 0xC4, 
0x03, 0x03, 0x02, 0xC2, 0x83, 0x00, 0x00, 0x38, 0x01, 0x00, 0x80, 0x8B, 0x03, 0x00, 0x05, 0x03, 
0x84, 0x04, 0x00, 0xC4, 0x03, 0x02, 0x01, 0x3C, 0x03, 0x02, 0x00, 0x38, 0x01, 0x00, 0x80, 0x8B, 
0x03, 0x00, 0x05, 0x03, 0x04, 0x05, 0x00, 0xC4, 0x03, 0x02, 0x01, 0x8B, 0x03, 0x00, 0x03, 0x00, 
0x04, 0x06, 0x00, 0xC4, 0x03, 0x02, 0x02, 0xBC, 0x03, 0x04, 0x00, 0xB8, 0x03, 0x00, 0x80, 0x8B, 
0x03, 0x00, 0x0B, 0xC2, 0x03, 0x00, 0x00, 0x38, 0x02, 0x00, 0x80, 0x94, 0x83, 0x06, 0x0C, 0x83, 
0x84, 0x06, 0x00, 0x03, 0x05, 0x07, 0x00, 0xC4, 0x03, 0x04, 0x02, 0x00, 0x03, 0x07, 0x00, 0x8B, 
0x03, 0x00, 0x01, 0x90, 0x03, 0x05, 0x06, 0xCC, 0x00, 0x00, 0x02, 0xCD, 0x00, 0x16, 0x00, 0xB6, 
0x00, 0x00, 0x00, 0x93, 0x00, 0x02, 0x00, 0x52, 0x00, 0x00, 0x00, 0x92, 0x80, 0x0F, 0x10, 0x92, 
0x80, 0x11, 0x12, 0x0B, 0x01, 0x00, 0x13, 0x3C, 0x01, 0x02, 0x00, 0xB8, 0x00, 0x00, 0x80, 0x0F, 
0x00, 0x13, 0x01, 0xB8, 0x06, 0x00, 0x80, 0x0B, 0x01, 0x00, 0x13, 0x0E, 0x01, 0x02, 0x0F, 0x3C, 
0x01, 0x02, 0x00, 0x38, 0x01, 0x00, 0x80, 0x0B, 0x01, 0x00, 0x13, 0x8E, 0x01, 0x01, 0x0F, 0x12, 
0x01, 0x0F, 0x03, 0x0B, 0x01, 0x00, 0x13, 0x0E, 0x01, 0x02, 0x11, 0x3C, 0x01, 0x02, 0x00, 0x38, 
0x01, 0x00, 0x80, 0x0B, 0x01, 0x00, 0x13, 0x8E, 0x01, 0x01, 0x11, 0x12, 0x01, 0x11, 0x03, 0x0B, 
0x01, 0x00, 0x13, 0x46, 0x81, 0x02, 0x00, 0x46, 0x81, 0x01, 0x00, 0x94, 0x04, 0x86, 0x70, 0x61, 
0x69, 0x72, 0x73, 0x04, 0x83, 0x5F, 0x47, 0x00, 0x04, 0x85, 0x74, 0x79, 0x70, 0x65, 0x04, 0x87, 
0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x04, 0x86, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x04, 0xA5, 0x76, 
0x61, 0x72, 0x73, 0x3A, 0x20, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x6E, 0x61, 
0x6D, 0x65, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 
0x69, 0x6E, 0x67, 0x04, 0x86, 0x6D, 0x61, 0x74, 0x63, 0x68, 0x04, 0x99, 0x5E, 0x5B, 0x41, 0x2D, 
0x5A, 0x61, 0x2D, 0x7A, 0x5F, 0x5D, 0x5B, 0x41, 0x2D, 0x5A, 0x61, 0x2D, 0x7A, 0x30, 0x2D, 0x39, 
0x5F, 0x5D, 0x2A, 0x24, 0x04, 0x9C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 0x49, 0x6E, 0x76, 0x61, 
0x6C, 0x69, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 
0x65, 0x04, 0x94, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x6D, 
0x69, 0x73, 0x73, 0x69, 0x6E, 0x67, 0x04, 0x86, 0x52, 0x45, 0x47, 0x45, 0x58, 0x04, 0x85, 0x67, 
0x73, 0x75, 0x62, 0x04, 0x83, 0x5C, 0x5C, 0x04, 0x85, 0x5C, 0x5C, 0x5C, 0x5C, 0x04, 0x87, 0x72, 
0x65, 0x73, 0x75, 0x6C, 0x74, 0x04, 0x81, 0x04, 0x85, 0x73, 0x6B, 0x69, 0x70, 0x11, 0x04, 0x8C, 
0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x81, 0x00, 0x00, 0x00, 0x80, 
0xCB, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xF0, 
0x00, 0x12, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 
0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x00, 0x01, 0x80, 0x88, 0x85, 0x61, 
0x72, 0x67, 0x73, 0x80, 0xCB, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 
0x29, 0x83, 0xB0, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x83, 
0xB0, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x83, 0xB0, 0x8C, 
0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x83, 0xB0, 0x85, 0x6E, 0x61, 
0x6D, 0x65, 0x84, 0xAE, 0x86, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x84, 0xAE, 0x84, 0x72, 0x65, 0x73, 
0xB5, 0xCB, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x80, 0x01, 0x9F, 0x01, 0xBA, 0x01, 0x00, 0x06, 
0xA8, 0x93, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x00, 0x92, 0x00, 0x00, 
0x02, 0x0B, 0x01, 0x00, 0x01, 0x92, 0x00, 0x01, 0x02, 0x0B, 0x01, 0x00, 0x02, 0x92, 0x00, 0x02, 
0x02, 0x0B, 0x01, 0x00, 0x03, 0x92, 0x00, 0x03, 0x02, 0x0B, 0x01, 0x00, 0x04, 0x92, 0x00, 0x04, 
0x02, 0x0B, 0x01, 0x00, 0x05, 0x92, 0x00, 0x05, 0x02, 0x0B, 0x01, 0x00, 0x06, 0x92, 0x00, 0x06, 
0x02, 0x0B, 0x01, 0x00, 0x07, 0x92, 0x00, 0x07, 0x02, 0x0B, 0x01, 0x00, 0x08, 0x80, 0x01, 0x01, 
0x00, 0x13, 0x02, 0x01, 0x00, 0x52, 0x00, 0x00, 0x00, 0xCF, 0x02, 0x00, 0x00, 0x12, 0x02, 0x09, 
0x05, 0x44, 0x01, 0x03, 0x01, 0x0B, 0x01, 0x00, 0x0A, 0x80, 0x01, 0x00, 0x00, 0x03, 0x82, 0x05, 
0x00, 0x80, 0x02, 0x01, 0x00, 0x44, 0x01, 0x04, 0x03, 0x42, 0x81, 0x00, 0x00, 0x38, 0x01, 0x00, 
0x80, 0x05, 0x02, 0x00, 0x00, 0x80, 0x02, 0x03, 0x00, 0x46, 0x02, 0x03, 0x00, 0x0B, 0x02, 0x00, 
0x0C, 0x80, 0x02, 0x02, 0x00, 0x45, 0x02, 0x02, 0x00, 0x46, 0x02, 0x00, 0x00, 0x47, 0x02, 0x01, 
0x00, 0x8D, 0x04, 0x86, 0x70, 0x61, 0x69, 0x72, 0x73, 0x04, 0x87, 0x69, 0x70, 0x61, 0x69, 0x72, 
0x73, 0x04, 0x85, 0x74, 0x79, 0x70, 0x65, 0x04, 0x89, 0x74, 0x6F, 0x6E, 0x75, 0x6D, 0x62, 0x65, 
0x72, 0x04, 0x89, 0x74, 0x6F, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x04, 0x86, 0x74, 0x61, 0x62, 
0x6C, 0x65, 0x04, 0x85, 0x6D, 0x61, 0x74, 0x68, 0x04, 0x87, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 
0x04, 0x8D, 0x73, 0x65, 0x74, 0x6D, 0x65, 0x74, 0x61, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x04, 0x88, 
0x5F, 0x5F, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x04, 0x89, 0x6C, 0x6F, 0x61, 0x64, 0x66, 0x69, 0x6C, 
0x65, 0x04, 0x82, 0x74, 0x04, 0x86, 0x70, 0x63, 0x61, 0x6C, 0x6C, 0x81, 0x00, 0x00, 0x00, 0x81, 
0x80, 0x01, 0xAC, 0x01, 0xB2, 0x02, 0x00, 0x03, 0x90, 0xBC, 0x80, 0x00, 0x00, 0xB8, 0x03, 0x00, 
0x80, 0xBC, 0x80, 0x01, 0x00, 0xB8, 0x02, 0x00, 0x80, 0xBC, 0x80, 0x02, 0x00, 0xB8, 0x01, 0x00, 
0x80, 0xBC, 0x80, 0x03, 0x00, 0xB8, 0x00, 0x00, 0x80, 0xBC, 0x00, 0x04, 0x00, 0xB8, 0x00, 0x00, 
0x80, 0x08, 0x01, 0x00, 0x00, 0x48, 0x01, 0x02, 0x00, 0x0B, 0x01, 0x00, 0x00, 0x0C, 0x01, 0x02, 
0x01, 0x48, 0x01, 0x02, 0x00, 0x47, 0x01, 0x01, 0x00, 0x85, 0x04, 0x83, 0x5F, 0x47, 0x04, 0x83, 
0x6F, 0x73, 0x04, 0x83, 0x69, 0x6F, 0x04, 0x87, 0x64, 0x6F, 0x66, 0x69, 0x6C, 0x65, 0x04, 0x88, 
0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x81, 0x00, 0x00, 0x00, 0x80, 0x90, 0x02, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x80, 0x82, 0x82, 
0x5F, 0x80, 0x90, 0x82, 0x6B, 0x80, 0x90, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0xA8, 0x02, 0x00, 
0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 
0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0xF9, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 
0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x80, 0x84, 0x85, 0x70, 0x61, 0x74, 0x68, 0x80, 0xA8, 0x88, 
0x73, 0x61, 0x66, 0x65, 0x45, 0x6E, 0x76, 0x92, 0xA8, 0x86, 0x63, 0x68, 0x75, 0x6E, 0x6B, 0x9E, 
0xA8, 0x84, 0x65, 0x72, 0x72, 0x9E, 0xA8, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x80, 0x01, 0xBC, 
0x02, 0x80, 0x03, 0x00, 0x17, 0x01, 0x8C, 0x93, 0x01, 0x02, 0x00, 0x52, 0x00, 0x00, 0x00, 0x92, 
0x81, 0x00, 0x01, 0x92, 0x81, 0x02, 0x03, 0x0B, 0x02, 0x00, 0x04, 0x80, 0x02, 0x00, 0x00, 0x44, 
0x02, 0x02, 0x02, 0x3C, 0x02, 0x05, 0x00, 0xB8, 0x01, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x06, 0x80, 
0x02, 0x00, 0x00, 0x44, 0x02, 0x02, 0x02, 0x00, 0x00, 0x04, 0x00, 0x3C, 0x00, 0x07, 0x00, 0x38, 
0x03, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x08, 0x83, 0x82, 0x04, 0x00, 0x0B, 0x03, 0x00, 0x06, 0x80, 
0x03, 0x01, 0x00, 0x44, 0x03, 0x02, 0x02, 0xB5, 0x02, 0x02, 0x00, 0x44, 0x02, 0x02, 0x01, 0xBC, 
0x80, 0x07, 0x00, 0xB8, 0x00, 0x00, 0x80, 0xBC, 0x00, 0x01, 0x00, 0x38, 0x01, 0x00, 0x80, 0x0B, 
0x02, 0x00, 0x08, 0x83, 0x02, 0x05, 0x00, 0x44, 0x02, 0x02, 0x01, 0x3C, 0x01, 0x07, 0x00, 0x38, 
0x00, 0x00, 0x80, 0x05, 0x01, 0x00, 0x00, 0x0B, 0x02, 0x00, 0x0B, 0x0C, 0x02, 0x04, 0x01, 0x3C, 
0x02, 0x07, 0x00, 0x38, 0x2C, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x0C, 0x80, 0x02, 0x01, 0x00, 0x44, 
0x02, 0x02, 0x03, 0x42, 0x82, 0x00, 0x00, 0x38, 0x05, 0x00, 0x80, 0x0B, 0x03, 0x00, 0x08, 0x83, 
0x83, 0x06, 0x00, 0x0B, 0x04, 0x00, 0x06, 0x80, 0x04, 0x01, 0x00, 0x44, 0x04, 0x02, 0x02, 0x83, 
0x04, 0x07, 0x00, 0x0B, 0x05, 0x00, 0x06, 0x80, 0x05, 0x05, 0x00, 0x44, 0x05, 0x02, 0x02, 0xB5, 
0x03, 0x04, 0x00, 0x44, 0x03, 0x02, 0x01, 0x0B, 0x03, 0x00, 0x04, 0x80, 0x03, 0x05, 0x00, 0x44, 
0x03, 0x02, 0x02, 0x3C, 0x83, 0x0F, 0x00, 0x38, 0x03, 0x00, 0x80, 0x0B, 0x03, 0x00, 0x08, 0x83, 
0x03, 0x08, 0x00, 0x0B, 0x04, 0x00, 0x06, 0x80, 0x04, 0x01, 0x00, 0x44, 0x04, 0x02, 0x02, 0xB5, 
0x03, 0x02, 0x00, 0x44, 0x03, 0x02, 0x01, 0x13, 0x03, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x8B, 
0x03, 0x00, 0x11, 0x00, 0x04, 0x05, 0x00, 0xC4, 0x03, 0x02, 0x05, 0xCB, 0x03, 0x19, 0x00, 0x8D, 
0x06, 0x0C, 0x01, 0x0D, 0x07, 0x0C, 0x02, 0x3C, 0x07, 0x07, 0x00, 0x38, 0x00, 0x00, 0x80, 0x38, 
0x16, 0x00, 0x80, 0x8B, 0x07, 0x00, 0x04, 0x00, 0x08, 0x0D, 0x00, 0xC4, 0x07, 0x02, 0x02, 0xBC, 
0x07, 0x0F, 0x00, 0xB8, 0x08, 0x00, 0x80, 0x8B, 0x07, 0x00, 0x11, 0x00, 0x08, 0x0D, 0x00, 0xC4, 
0x07, 0x02, 0x05, 0xCB, 0x07, 0x05, 0x00, 0x8B, 0x0A, 0x00, 0x04, 0x00, 0x0B, 0x14, 0x00, 0xC4, 
0x0A, 0x02, 0x02, 0xBC, 0x0A, 0x05, 0x00, 0xB8, 0x01, 0x00, 0x80, 0x8B, 0x0A, 0x00, 0x06, 0x00, 
0x0B, 0x14, 0x00, 0xC4, 0x0A, 0x02, 0x02, 0x00, 0x0A, 0x15, 0x00, 0x10, 0x03, 0x14, 0x0E, 0xCC, 
0x07, 0x00, 0x02, 0xCD, 0x07, 0x06, 0x00, 0xB6, 0x07, 0x00, 0x00, 0xB8, 0x0A, 0x00, 0x80, 0x8B, 
0x07, 0x00, 0x04, 0x00, 0x08, 0x0D, 0x00, 0xC4, 0x07, 0x02, 0x02, 0xBC, 0x87, 0x12, 0x00, 0x38, 
0x02, 0x00, 0x80, 0x8B, 0x07, 0x00, 0x04, 0x00, 0x08, 0x0D, 0x00, 0xC4, 0x07, 0x02, 0x02, 0xBC, 
0x07, 0x05, 0x00, 0xB8, 0x05, 0x00, 0x80, 0x8B, 0x07, 0x00, 0x04, 0x00, 0x08, 0x0D, 0x00, 0xC4, 
0x07, 0x02, 0x02, 0xBC, 0x07, 0x05, 0x00, 0xB8, 0x01, 0x00, 0x80, 0x8B, 0x07, 0x00, 0x06, 0x00, 
0x08, 0x0D, 0x00, 0xC4, 0x07, 0x02, 0x02, 0x80, 0x06, 0x0F, 0x00, 0x10, 0x03, 0x0D, 0x0E, 0x38, 
0x00, 0x00, 0x80, 0xB8, 0xFF, 0xFF, 0x7F, 0xCC, 0x03, 0x00, 0x02, 0xCD, 0x03, 0x1A, 0x00, 0xB6, 
0x03, 0x00, 0x00, 0x8B, 0x03, 0x00, 0x0B, 0x90, 0x03, 0x01, 0x06, 0x0B, 0x02, 0x00, 0x0B, 0x0C, 
0x02, 0x04, 0x01, 0x0C, 0x02, 0x04, 0x00, 0x3C, 0x02, 0x07, 0x00, 0xB8, 0x02, 0x00, 0x80, 0x42, 
0x01, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x80, 0x92, 0x81, 0x00, 0x07, 0x38, 0x01, 0x00, 0x80, 0x92, 
0x01, 0x00, 0x00, 0x38, 0x00, 0x00, 0x80, 0x92, 0x01, 0x00, 0x04, 0x0F, 0x00, 0x13, 0x03, 0xC6, 
0x81, 0x02, 0x00, 0xC6, 0x82, 0x01, 0x00, 0x94, 0x04, 0x87, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 
0x04, 0x81, 0x04, 0x85, 0x73, 0x6B, 0x69, 0x70, 0x01, 0x04, 0x85, 0x74, 0x79, 0x70, 0x65, 0x04, 
0x87, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x04, 0x89, 0x74, 0x6F, 0x73, 0x74, 0x72, 0x69, 0x6E, 
0x67, 0x00, 0x04, 0x86, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x04, 0xA3, 0x6C, 0x6B, 0x70, 0x3A, 0x20, 
0x6B, 0x65, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x66, 0x69, 
0x6C, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x69, 0x6C, 0x20, 0x69, 0x6E, 0x20, 0x04, 0xA3, 0x6C, 
0x6B, 0x70, 0x3A, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x73, 
0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x6F, 0x72, 0x20, 0x65, 0x6D, 0x70, 0x74, 
0x79, 0x04, 0x8B, 0x68, 0x61, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x04, 0x94, 0x73, 
0x61, 0x66, 0x65, 0x4C, 0x6F, 0x61, 0x64, 0x46, 0x69, 0x6C, 0x65, 0x53, 0x61, 0x6E, 0x64, 0x62, 
0x6F, 0x78, 0x04, 0xA4, 0x6C, 0x6B, 0x70, 0x3A, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 
0x74, 0x6F, 0x20, 0x73, 0x61, 0x66, 0x65, 0x6C, 0x79, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x66, 
0x69, 0x6C, 0x65, 0x20, 0x61, 0x74, 0x20, 0x04, 0x83, 0x3A, 0x20, 0x04, 0x86, 0x74, 0x61, 0x62, 
0x6C, 0x65, 0x04, 0xA0, 0x6C, 0x6B, 0x70, 0x3A, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 
0x20, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 
0x61, 0x74, 0x20, 0x04, 0x87, 0x69, 0x70, 0x61, 0x69, 0x72, 0x73, 0x04, 0x87, 0x73, 0x74, 0x72, 
0x69, 0x6E, 0x67, 0x04, 0x8C, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 0x54, 0x61, 0x62, 0x6C, 0x65, 
0x81, 0x00, 0x00, 0x00, 0x80, 0x01, 0x8C, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 
0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x02, 0xFC, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0xEB, 
0x00, 0x18, 0x01, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x01, 0x02, 
0x03, 0x01, 0x01, 0x81, 0x01, 0x80, 0x01, 0xF4, 0x96, 0x84, 0x6B, 0x65, 0x79, 0x80, 0x01, 0x8C, 
0x86, 0x68, 0x70, 0x61, 0x74, 0x68, 0x80, 0x01, 0x8C, 0x86, 0x69, 0x6E, 0x6E, 0x65, 0x72, 0x80, 
0x01, 0x8C, 0x84, 0x72, 0x65, 0x73, 0x84, 0x01, 0x8C, 0x88, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 
0x73, 0xA7, 0xFD, 0x8C, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6E, 0x74, 0x72, 0x69, 0x65, 0x73, 0xA7, 
0xFD, 0x84, 0x74, 0x62, 0x6C, 0xC2, 0xFD, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 
0x74, 0x65, 0x29, 0xC5, 0xFA, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 
0x29, 0xC5, 0xFA, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0xC5, 
0xFA, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0xC5, 0xFA, 0x82, 
0x5F, 0xC6, 0xF8, 0x86, 0x65, 0x6E, 0x74, 0x72, 0x79, 0xC6, 0xF8, 0x85, 0x6B, 0x65, 0x79, 0x73, 
0xC7, 0xF8, 0x86, 0x76, 0x61, 0x6C, 0x75, 0x65, 0xC8, 0xF8, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 
0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0xD3, 0xE0, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 
0x61, 0x74, 0x65, 0x29, 0xD3, 0xE0, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 
0x65, 0x29, 0xD3, 0xE0, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 
0xD3, 0xE0, 0x82, 0x5F, 0xD4, 0xDE, 0x82, 0x6B, 0xD4, 0xDE, 0x84, 0x76, 0x61, 0x6C, 0x01, 0x80, 
0x01, 0x8C, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x80, 0x02, 0x85, 0x02, 0xB0, 0x01, 0x00, 0x0E, 
0xFA, 0x93, 0x00, 0x02, 0x00, 0x52, 0x00, 0x00, 0x00, 0x92, 0x80, 0x00, 0x01, 0x92, 0x80, 0x02, 
0x03, 0x3C, 0x80, 0x04, 0x00, 0xB8, 0x00, 0x00, 0x80, 0x3C, 0x00, 0x01, 0x00, 0xB8, 0x01, 0x00, 
0x80, 0x0B, 0x01, 0x00, 0x05, 0x83, 0x01, 0x03, 0x00, 0x44, 0x01, 0x02, 0x01, 0xC6, 0x80, 0x02, 
0x00, 0x0B, 0x01, 0x00, 0x07, 0x80, 0x01, 0x00, 0x00, 0x44, 0x01, 0x02, 0x03, 0x42, 0x81, 0x00, 
0x00, 0x38, 0x05, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x05, 0x83, 0x02, 0x04, 0x00, 0x0B, 0x03, 0x00, 
0x09, 0x80, 0x03, 0x00, 0x00, 0x44, 0x03, 0x02, 0x02, 0x83, 0x03, 0x05, 0x00, 0x0B, 0x04, 0x00, 
0x09, 0x80, 0x04, 0x03, 0x00, 0x44, 0x04, 0x02, 0x02, 0xB5, 0x02, 0x04, 0x00, 0x44, 0x02, 0x02, 
0x01, 0x0B, 0x02, 0x00, 0x0B, 0x80, 0x02, 0x03, 0x00, 0x44, 0x02, 0x02, 0x02, 0x3C, 0x82, 0x0C, 
0x00, 0x38, 0x03, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x05, 0x83, 0x82, 0x06, 0x00, 0x0B, 0x03, 0x00, 
0x09, 0x80, 0x03, 0x00, 0x00, 0x44, 0x03, 0x02, 0x02, 0xB5, 0x02, 0x02, 0x00, 0x44, 0x02, 0x02, 
0x01, 0x0B, 0x02, 0x00, 0x0E, 0x80, 0x02, 0x03, 0x00, 0x44, 0x02, 0x02, 0x05, 0x4B, 0x82, 0x1A, 
0x00, 0x0B, 0x05, 0x00, 0x0B, 0x80, 0x05, 0x08, 0x00, 0x44, 0x05, 0x02, 0x02, 0x3C, 0x85, 0x0F, 
0x00, 0xB8, 0x03, 0x00, 0x80, 0x0B, 0x05, 0x00, 0x05, 0x83, 0x05, 0x08, 0x00, 0x0B, 0x06, 0x00, 
0x09, 0x80, 0x06, 0x08, 0x00, 0x44, 0x06, 0x02, 0x02, 0x83, 0x86, 0x08, 0x00, 0xB5, 0x05, 0x03, 
0x00, 0x44, 0x05, 0x02, 0x01, 0x0B, 0x05, 0x00, 0x0F, 0x0E, 0x05, 0x0A, 0x12, 0x80, 0x05, 0x08, 
0x00, 0x03, 0x86, 0x09, 0x00, 0x44, 0x05, 0x03, 0x02, 0x42, 0x85, 0x00, 0x00, 0xB8, 0x03, 0x00, 
0x80, 0x0B, 0x05, 0x00, 0x05, 0x83, 0x05, 0x0A, 0x00, 0x0B, 0x06, 0x00, 0x09, 0x80, 0x06, 0x08, 
0x00, 0x44, 0x06, 0x02, 0x02, 0x83, 0x86, 0x08, 0x00, 0xB5, 0x05, 0x03, 0x00, 0x44, 0x05, 0x02, 
0x01, 0xBC, 0x04, 0x04, 0x00, 0xB8, 0x03, 0x00, 0x80, 0x0B, 0x05, 0x00, 0x05, 0x83, 0x85, 0x0A, 
0x00, 0x0B, 0x06, 0x00, 0x09, 0x80, 0x06, 0x08, 0x00, 0x44, 0x06, 0x02, 0x02, 0x83, 0x86, 0x08, 
0x00, 0xB5, 0x05, 0x03, 0x00, 0x44, 0x05, 0x02, 0x01, 0x0B, 0x05, 0x00, 0x16, 0x42, 0x05, 0x00, 
0x00, 0xB8, 0x04, 0x00, 0x80, 0x0B, 0x05, 0x00, 0x0B, 0x80, 0x05, 0x09, 0x00, 0x44, 0x05, 0x02, 
0x02, 0x3C, 0x05, 0x0F, 0x00, 0x38, 0x02, 0x00, 0x80, 0x14, 0x85, 0x09, 0x17, 0x03, 0x06, 0x0C, 
0x00, 0x83, 0x86, 0x0C, 0x00, 0x44, 0x05, 0x04, 0x02, 0x80, 0x04, 0x0A, 0x00, 0x0B, 0x05, 0x00, 
0x1A, 0x10, 0x05, 0x08, 0x09, 0x4C, 0x02, 0x00, 0x02, 0x4D, 0x82, 0x1B, 0x00, 0x36, 0x02, 0x00, 
0x00, 0x0B, 0x02, 0x00, 0x1B, 0x3C, 0x02, 0x04, 0x00, 0xB8, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x1B, 
0x01, 0xB8, 0x06, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x1B, 0x0E, 0x02, 0x04, 0x00, 0x3C, 0x02, 0x04, 
0x00, 0x38, 0x01, 0x00, 0x80, 0x0B, 0x02, 0x00, 0x1B, 0x8E, 0x02, 0x01, 0x00, 0x12, 0x02, 0x00, 
0x05, 0x0B, 0x02, 0x00, 0x1B, 0x0E, 0x02, 0x04, 0x02, 0x3C, 0x02, 0x04, 0x00, 0x38, 0x01, 0x00, 
0x80, 0x0B, 0x02, 0x00, 0x1B, 0x8E, 0x02, 0x01, 0x02, 0x12, 0x02, 0x02, 0x05, 0x0B, 0x02, 0x00, 
0x1B, 0x46, 0x82, 0x02, 0x00, 0x46, 0x82, 0x01, 0x00, 0x9C, 0x04, 0x87, 0x72, 0x65, 0x73, 0x75, 
0x6C, 0x74, 0x04, 0x81, 0x04, 0x85, 0x73, 0x6B, 0x69, 0x70, 0x11, 0x00, 0x04, 0x86, 0x65, 0x72, 
0x72, 0x6F, 0x72, 0x04, 0xA5, 0x6C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 0x66, 0x69, 0x6C, 0x65, 
0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 
0x20, 0x6F, 0x72, 0x20, 0x65, 0x6D, 0x70, 0x74, 0x79, 0x04, 0x94, 0x73, 0x61, 0x66, 0x65, 0x4C, 
0x6F, 0x61, 0x64, 0x46, 0x69, 0x6C, 0x65, 0x53, 0x61, 0x6E, 0x64, 0x62, 0x6F, 0x78, 0x04, 0xA6, 
0x6C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x6F, 
0x20, 0x73, 0x61, 0x66, 0x65, 0x6C, 0x79, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x66, 0x69, 0x6C, 
0x65, 0x20, 0x61, 0x74, 0x20, 0x04, 0x89, 0x74, 0x6F, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x04, 
0x83, 0x3A, 0x20, 0x04, 0x85, 0x74, 0x79, 0x70, 0x65, 0x04, 0x86, 0x74, 0x61, 0x62, 0x6C, 0x65, 
0x04, 0xA7, 0x6C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 
0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x20, 0x69, 0x6E, 0x20, 
0x66, 0x69, 0x6C, 0x65, 0x20, 0x61, 0x74, 0x20, 0x04, 0x86, 0x70, 0x61, 0x69, 0x72, 0x73, 0x04, 
0x87, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x14, 0xBB, 0x6C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 
0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6D, 0x75, 
0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x20, 
0x46, 0x6F, 0x75, 0x6E, 0x64, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x6B, 0x65, 
0x79, 0x20, 0x22, 0x04, 0x82, 0x22, 0x04, 0x86, 0x6D, 0x61, 0x74, 0x63, 0x68, 0x04, 0x99, 0x5E, 
0x5B, 0x41, 0x2D, 0x5A, 0x61, 0x2D, 0x7A, 0x5F, 0x5D, 0x5B, 0x41, 0x2D, 0x5A, 0x61, 0x2D, 0x7A, 
0x30, 0x2D, 0x39, 0x5F, 0x5D, 0x2A, 0x24, 0x04, 0x9F, 0x6C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 
0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 
0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x22, 0x04, 0xA4, 0x6C, 0x76, 0x61, 0x72, 0x73, 0x3A, 0x20, 
0x56, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x6F, 
0x72, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x22, 0x04, 0x86, 0x52, 0x45, 
0x47, 0x45, 0x58, 0x04, 0x85, 0x67, 0x73, 0x75, 0x62, 0x04, 0x83, 0x5C, 0x5C, 0x04, 0x85, 0x5C, 
0x5C, 0x5C, 0x5C, 0x04, 0x83, 0x5F, 0x47, 0x04, 0x8C, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 0x54, 
0x61, 0x62, 0x6C, 0x65, 0x81, 0x00, 0x00, 0x00, 0x80, 0xFA, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xF3, 0x00, 0x0E, 0x02, 0x00, 
0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 
0x00, 0x03, 0x00, 0x01, 0x80, 0x8A, 0x89, 0x66, 0x69, 0x6C, 0x65, 0x50, 0x61, 0x74, 0x68, 0x80, 
0xFA, 0x84, 0x72, 0x65, 0x73, 0x84, 0xFA, 0x88, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x8F, 
0xFA, 0x8A, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x8F, 0xFA, 0x8C, 0x28, 0x66, 
0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0xAB, 0xE3, 0x8C, 0x28, 0x66, 0x6F, 0x72, 
0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0xAB, 0xE3, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 
0x74, 0x61, 0x74, 0x65, 0x29, 0xAB, 0xE3, 0x8C, 0x28, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x61, 
0x74, 0x65, 0x29, 0xAB, 0xE3, 0x85, 0x6E, 0x61, 0x6D, 0x65, 0xAC, 0xE1, 0x86, 0x76, 0x61, 0x6C, 
0x75, 0x65, 0xAC, 0xE1, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, 0x95, 0x01, 0x2F, 0xD4, 0x41, 0xF0, 
0x3A, 0xDB, 0x4C, 0xDE, 0x24, 0x00, 0x05, 0x00, 0x00, 0x1D, 0xE5, 0x61, 0xBC, 0x74, 0xD5, 0x2B, 
0x80, 0x80, 0x81, 0x85, 0x5F, 0x45, 0x4E, 0x56, };
static const size_t luaBytecodeSize = sizeof(luaBytecode);

// ---------- Original Lua Source Code (For Documentation/Fallback) ----------
static const char luaSourceCode[] = {
" ------------------------------------------------------------------\n"
" -- 1) cond function\n"
" ------------------------------------------------------------------\n"
" function cond(cond, trueVal, falseVal)\n"
"   local res = {result = '', skip = false}  -- Initialize result table with defaults\n"
"   if cond == nil then\n"
"     error('cond: condition cannot be nil')\n"
"     return res\n"
"   end\n"
" \n"
"   if cond and trueVal == nil then\n"
"     error('cond: trueVal cannot be nil')\n"
"     return res\n"
"   end\n"
" \n"
"   if not cond and falseVal == nil then\n"
"     res.skip = true  -- Skip ONLY if falseVal is not provided\n"
"   end\n"
" \n"
"   if type(trueVal) == 'function' then\n"
"     trueVal = trueVal()\n"
"   end\n"
" \n"
"   if type(falseVal) == 'function' then\n"
"     falseVal = falseVal()\n"
"   end\n"
" \n"
"   if cond then\n"
"     if type(trueVal) == 'table' then\n"
"       res.result = trueVal.result\n"
"       res.skip = trueVal.skip\n"
"     else\n"
"       res.result = trueVal\n"
"       res.skip = false\n"
"     end\n"
"   else\n"
"     if not res.skip then\n"
"       if type(falseVal) == 'table' then\n"
"         res.result = falseVal.result\n"
"         res.skip = falseVal.skip\n"
"       else\n"
"         res.result = falseVal\n"
"       end\n"
"     end\n"
"   end\n"
"   resultTable = res\n"
"   return res\n"
" end\n"
" \n"
" ------------------------------------------------------------------\n"
" -- 2) set function\n"
" ------------------------------------------------------------------\n"
" function set(strOrCalc)\n"
"   local res = {result = '', skip = false}\n"
"   if strOrCalc == nil then\n"
"     error('set: cannot be nil')\n"
"     return\n"
"   end\n"
"   if type(strOrCalc) == 'string' then\n"
"     res.result = strOrCalc\n"
"   elseif type(strOrCalc) == 'number' then\n"
"     res.result = tostring(strOrCalc)\n"
"   else\n"
"     error('set: Expected string or number')\n"
"     return\n"
"   end\n"
"   resultTable = res\n"
"   return res\n"
" end\n"
" \n"
" ------------------------------------------------------------------\n"
" -- 3) fmtN function\n"
" ------------------------------------------------------------------\n"
" function fmtN(num, maxDecimals, fixedDecimals)\n"
"   if num == nil then\n"
"     error('fmtN: num cannot be nil')\n"
"     return\n"
"   elseif type(num) ~= 'number' then\n"
"     error('fmtN: Invalid type for num. Expected a number')\n"
"     return\n"
"   end\n"
"   if maxDecimals == nil then\n"
"     error('fmtN: maxDecimals cannot be nil')\n"
"     return\n"
"   elseif type(maxDecimals) ~= 'number' then\n"
"     error('fmtN: Invalid type for maxDecimals. Expected a number')\n"
"     return\n"
"   end\n"
"   if fixedDecimals == nil then\n"
"     error('fmtN: fixedDecimals cannot be nil')\n"
"     return\n"
"   elseif type(fixedDecimals) ~= 'boolean' then\n"
"     error('fmtN: Invalid type for fixedDecimals. Expected a boolean')\n"
"     return\n"
"   end\n"
" \n"
"   local multiplier = 10 ^ maxDecimals\n"
"   local rounded = math.floor(num * multiplier + 0.5) / multiplier\n"
"   local output = ''\n"
"   if fixedDecimals then\n"
"     output = string.format('%.' .. maxDecimals .. 'f', rounded)\n"
"   else\n"
"     local intPart, fracPart = math.modf(rounded)\n"
"     if fracPart == 0 then\n"
"       output = tostring(intPart)\n"
"     else\n"
"       output = tostring(rounded)\n"
"     end\n"
"   end\n"
"   return output\n"
" end\n"
" \n"
" ------------------------------------------------------------------\n"
" -- 4) vars function (and init alias)\n"
" ------------------------------------------------------------------\n"
" function vars(args)\n"
"   for name, value in pairs(args) do\n"
"     -- Set the global variable only if it does not already exist\n"
"     if _G[name] == nil then\n"
"       if type(name) ~= 'string' then\n"
"         error('vars: Variable name must be a string')\n"
"       end\n"
"       if not string.match(name, '^[A-Za-z_][A-Za-z0-9_]*$') then\n"
"         error('vars: Invalid variable name')\n"
"       end\n"
"       if value == nil then\n"
"         error('vars: Value missing')\n"
"       end\n"
"       -- If REGEX is true and value is a string, escape backslashes\n"
"       if type(value) == 'string' and REGEX then\n"
"         value = value:gsub('\\\\', '\\\\\\\\')\n"
"       end\n"
"       _G[name] = value\n"
"     end\n"
"   end\n"
" \n"
"   -- Forward or initialize resultTable\n"
"   local res = {result = '', skip = true}\n"
"   if resultTable == nil then\n"
"     resultTable = res\n"
"   else\n"
"     if resultTable.result == nil then\n"
"       resultTable.result = res.result\n"
"     end\n"
"     if resultTable.skip == nil then\n"
"       resultTable.skip = res.skip\n"
"     end\n"
"   end\n"
"   return resultTable\n"
" end\n"
" \n"
" init = vars  -- 'init' alias for compatibility\n"
" \n"
" ------------------------------------------------------------------\n"
" -- 5) safeLoadFileSandbox and lkp\n"
" ------------------------------------------------------------------\n"
" hashTables = {}\n"
" \n"
" function safeLoadFileSandbox(path)\n"
"   -- Minimal environment\n"
"   local safeEnv = {\n"
"     pairs = pairs,\n"
"     ipairs = ipairs,\n"
"     type = type,\n"
"     tonumber = tonumber,\n"
"     tostring = tostring,\n"
"     table = table,\n"
"     math = math,\n"
"     string = string,\n"
"   }\n"
"   setmetatable(safeEnv, {\n"
"     __index = function(_, k)\n"
"       -- Block access to critical globals\n"
"       if k == '_G' or k == 'os' or k == 'io' or k == 'dofile' or k == 'require' then\n"
"         return nil\n"
"       end\n"
"       return _G[k]\n"
"     end\n"
"   })\n"
" \n"
"   local chunk, err = loadfile(path, 't', safeEnv)\n"
"   if not chunk then\n"
"     return false, err\n"
"   end\n"
"   return pcall(chunk)\n"
" end\n"
" \n"
" function lkp(key, hpath, inner)\n"
"   local res = { result = '', skip = false }\n"
" \n"
"   if type(key) == 'number' then\n"
"     key = tostring(key)\n"
"   end\n"
" \n"
"   if key == nil then\n"
"     error('lkp: key passed to file is nil in ' .. tostring(hpath))\n"
"   end\n"
"   if hpath == nil or hpath == '' then\n"
"     error('lkp: file path is invalid or empty')\n"
"   end\n"
"   if inner == nil then\n"
"     inner = false\n"
"   end\n"
" \n"
"   if hashTables[hpath] == nil then\n"
"     local success, dataEntries = safeLoadFileSandbox(hpath)\n"
"     if not success then\n"
"       error('lkp: failed to safely load file at ' .. tostring(hpath) .. ': ' .. tostring(dataEntries))\n"
"     end\n"
"     if type(dataEntries) ~= 'table' then\n"
"       error('lkp: invalid format in file at ' .. tostring(hpath))\n"
"     end\n"
" \n"
"     local tbl = {}\n"
"     for _, entry in ipairs(dataEntries) do\n"
"       local keys = entry[1]\n"
"       local value = entry[2]\n"
" \n"
"       if value == nil then\n"
"         goto continue\n"
"       end\n"
" \n"
"       if type(keys) == 'table' then\n"
"         for _, k in ipairs(keys) do\n"
"           if type(k) == 'number' then\n"
"             k = tostring(k)\n"
"           end\n"
"           tbl[k] = value\n"
"         end\n"
"       elseif type(keys) == 'string' or type(keys) == 'number' then\n"
"         if type(keys) == 'number' then\n"
"           keys = tostring(keys)\n"
"         end\n"
"         tbl[keys] = value\n"
"       else\n"
"         goto continue\n"
"       end\n"
"       ::continue::\n"
"     end\n"
"     hashTables[hpath] = tbl\n"
"   end\n"
" \n"
"   local val = hashTables[hpath][key]\n"
"   if val == nil then\n"
"     if inner then\n"
"       res.result = nil\n"
"     else\n"
"       res.result = key\n"
"     end\n"
"   else\n"
"     res.result = val\n"
"   end\n"
" \n"
"   resultTable = res\n"
"   return res\n"
" end\n"
" \n"
" ------------------------------------------------------------------\n"
" -- 6) lvars function\n"
" ------------------------------------------------------------------\n"
" function lvars(filePath)\n"
"   local res = {result = '', skip = true}\n"
" \n"
"   if filePath == nil or filePath == '' then\n"
"     error('lvars: file path is invalid or empty')\n"
"     return res\n"
"   end\n"
" \n"
"   local success, dataTable = safeLoadFileSandbox(filePath)\n"
"   if not success then\n"
"     error('lvars: failed to safely load file at ' .. tostring(filePath) .. ': ' .. tostring(dataTable))\n"
"   end\n"
"   if type(dataTable) ~= 'table' then\n"
"     error('lvars: invalid data format in file at ' .. tostring(filePath))\n"
"   end\n"
" \n"
"   for name, value in pairs(dataTable) do\n"
"     if type(name) ~= 'string' then\n"
"       error('lvars: Variable name must be a string. Found invalid key \\"' .. tostring(name) .. '\\"')\n"
"     end\n"
"     if not string.match(name, '^[A-Za-z_][A-Za-z0-9_]*$') then\n"
"       error('lvars: Invalid variable name \\"' .. tostring(name) .. '\\"')\n"
"     end\n"
"     if value == nil then\n"
"       error('lvars: Value missing for variable \\"' .. tostring(name) .. '\\"')\n"
"     end\n"
"     if REGEX and type(value) == 'string' then\n"
"       value = value:gsub('\\\\', '\\\\\\\\')\n"
"     end\n"
"     _G[name] = value\n"
"   end\n"
" \n"
"   if resultTable == nil then\n"
"     resultTable = res\n"
"   else\n"
"     if resultTable.result == nil then\n"
"       resultTable.result = res.result\n"
"     end\n"
"     if resultTable.skip == nil then\n"
"       resultTable.skip = res.skip\n"
"     end\n"
"   end\n"
"   return resultTable\n"
" end\n"
" \n"
};
static const size_t luaSourceSize = sizeof(luaSourceCode);

#endif // LUA_EMBEDDED_H
